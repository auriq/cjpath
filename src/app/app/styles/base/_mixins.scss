@function em($target, $context: $base-font-size) {
  //To save time, I'l disable px to em converter. Now it returns px

  @if $target == 0 {
    @return 0
  }
  @return $target; //TODO uncomment that on bulid
  //@return $target / $context + 0em;
}

@function retina-filename($filename, $extention: '.png') {
  @return $filename + '@2x' + $extention;
}

@mixin background-image-2x($filename, $width, $height, $extention: '.png') {
  background-repeat: no-repeat;
  @include background-image(image-url($filename + $extention));
  @include background-size($width $height);
  @media (-webkit-min-device-pixel-ratio: 1.3),
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @include background-image(image-url(retina-filename($filename, $extention)));
  }
}

@mixin retina-image {
  @media (-webkit-min-device-pixel-ratio: 1.3),
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content
  }
}


@mixin v-gradient($start-color, $end-color, $orientation: vertical) {
  $experimental-support-for-svg: true;
  @if $orientation == vertical {
    @include background-image(linear-gradient($start-color, $end-color));
  } @else {
    @include background-image(linear-gradient($orientation, $start-color, $end-color));
  }
  .oldie & {
    @include filter-gradient($start-color, $end-color, $orientation);
  }
}

@mixin custom-animate($name, $time:1s, $algor:linear, $delay:"", $loop:infinite,$fill:"") {
  -webkit-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  -moz-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  -ms-animation: #{$name} $time $algor #{$delay} $loop #{$fill};
  animation: #{$name} $time $algor #{$delay} $loop #{$fill};
}

@mixin slider-checkbox($width: 266px, $bg-color: $gray-blue, $active-bg-color: $icon-green, $shadow-color: $gray-blue-shadow, $font-size: 16px){

   label {
    background-color: $bg-color;
    cursor: pointer;
    height: 31px;
    position: relative;
    margin-bottom: 0;
    @include border-radius(16px);
    @include box-shadow(inset 0 2px 0 $shadow-color);
    width: $width;
     .dot {
      // Style for onstate
      background-color: $active-bg-color;
      height: 31px;
      left: 0;
      @include border-radius(15px);
      position: absolute;
      top: 0;
      width: 54%;
      @include transition(left $transition-speed);
    }
    .value-text {
      color: $gray;
      display: block;
      float: left;
      font-size: em($font-size);
      font-weight: 400;
      height: 31px;
      line-height: 30px;
      position: relative;
      text-align: center;
      width: 50%;
      z-index: 1;
      @include transition(color $transition-speed);
      &.text-1 {
        color: $white;
        left: 2%;
      }
      &.text-2 {
        float: right;
        right: 2%;
      }
    }
     input {
      position: absolute;
      visibility: hidden;
      &:checked {
        + .dot {
          left: 47%;
        }
        ~ .text-1 {
          color: $gray;
        }
        ~ .text-2 {
          color: $white;
        }
      }
    }
  }
}

@mixin double-bottom-border(){
  border-bottom: 2px solid #F4F7F8;
  position: relative;
  &:after {
    background-color: $white-darker;
    bottom: 0;
    content: '';
    display: block;
    height: 1px;
    left: 0;
    position: absolute;
    width: 100%;
  }
}

@mixin icon-selector($prefix: ''/*could be &*/){
  #{$prefix}[class^="icon-"], #{$prefix}[class*=" icon-"] {
    @content;
  }
}

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression}); 
  #{$property}: -o-calc(#{$expression}); 
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 
}

/*
@mixin scale($scalesize){
  -webkit-transform: scale($scalesize, $scalesize);
//  -moz-transform:    scale($scalesize, $scalesize);
//  -o-transform:      scale($scalesize, $scalesize);
  -ms-transform:     scale($scalesize, $scalesize);
  transform: scale($scalesize, $scalesize);

}

@mixin translate($translatesize){
  -webkit-transform: translate($translatesize, $translatesize);
//  -moz-transform:    translate($translatesize, $translatesize);
//  -o-transform:      translate($translatesize, $translatesize);
  -ms-transform:     translate($translatesize, $translatesize);
  transform : translate($translatesize, $translatesize);
}
*/

